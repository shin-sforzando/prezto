#
# Executes commands at the start of an interactive session.
#

# Start Profiling
#zmodload zsh/zprof

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

## Personal Zsh completions directory
#
PERSONAL_COMP_DIR="$HOME/.zsh_completions"
if [[ ! -d $PERSONAL_COMP_DIR ]]; then
  mkdir -p $PERSONAL_COMP_DIR
fi
export FPATH="$PERSONAL_COMP_DIR:$FPATH"

# Enable completions
autoload -Uz compinit && compinit

## Personal bin directory
# For example, installing a JetBrains alias.
#
PERSONAL_BIN_DIR="$HOME/.local/bin"
if [[ ! -d $PERSONAL_BIN_DIR ]]; then
  mkdir -p $PERSONAL_BIN_DIR
fi
JETBRAINS_APPS_DIR="$HOME/Library/Application Support/JetBrains/Toolbox/apps"
JETBRAINS_SCRIPTS_DIR="$HOME/Library/Application Support/JetBrains/Toolbox/scripts"
export PATH="$PERSONAL_BIN_DIR:$JETBRAINS_APPS_DIR:$JETBRAINS_SCRIPTS_DIR:$PATH"

## cURL
#
# For Intel
if [[ -x /usr/local/opt/curl/bin ]]; then
  export PATH="/usr/local/opt/curl/bin:$PATH"
fi
# For M1
if [[ -x /opt/homebrew/opt/curl/bin ]]; then
  export PATH="/opt/homebrew/opt/curl/bin:$PATH"
fi

## Delete Disused Files
alias ddf="find . \( -name '.DS_Store' -o -name '._*' -o -name '.apdisk' -o -name 'Thumbs.db' -o -name 'Desktop.ini' \) -delete -print"

## Say Success or Failure
alias -g ssf="&& say success || say failure"

## exa: Modern replacement for 'ls'
#
if which exa >/dev/null; then
  alias ls="exa -hF --icons"
  alias l="exa -haF --icons"
  alias la="exa -haF --icons"
  alias ll="exa -halF --icons --git"

  function chpwd() {
    exa -halF --icons --git
  }
else
  function chpwd() {
    ls -GlA
  }
fi

## eza: Modern, maintained replacement for ls
#
if which eza >/dev/null; then
  alias ls="eza -hF --icons"
  alias l="eza -haF --icons"
  alias la="eza -haF --icons"
  alias ll="eza -halF --icons --git"

  function chpwd() {
    eza -halF --icons --git
  }
else
  function chpwd() {
    ls -GlA
  }
fi

## fzf
#
if which fzf >/dev/null; then
  source $HOME/.fzf.zsh

  autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
  add-zsh-hook chpwd chpwd_recent_dirs
  chpwd_functions+=chpwd_recent_dirs
  zstyle ':chpwd:*' recent-dirs-max 1000
  zstyle ':chpwd:*' recent-dirs-default true
  zstyle ':completion:*' recent-dirs-insert always

  alias cdd='_fzf-cdr'
  function _fzf-cdr() {
    target_dir=$(cdr -l | sed 's/^[^ ][^ ]*  *//' | fzf --preview 'f() { sh -c "exa -halF --git $1" }; f {}')
    target_dir=$(echo ${target_dir/\~/$HOME})
    if [ -n "$target_dir" ]; then
      BUFFER="cd $target_dir"
      zle reset-prompt
    fi
  }
  zle -N _fzf-cdr
  if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
    # Avoid terminal with conflicting shortcust
    bindkey "^j" _fzf-cdr
  fi

  # Options
  export FZF_DEFAULT_OPTS="--height 50% --layout=reverse --border --inline-info --ansi --preview 'head -100 {}'"
fi

## bat: https://github.com/sharkdp/bat
#
if which bat >/dev/null; then
  alias cat="bat"
fi

## ov: https://github.com/noborus/ov
#
if which ov >/dev/null; then
  export PAGER="ov"
  export MANPAGER="ov"
  export BAT_PAGER="ov -F -H3"
  eval $(ov --completion zsh)
fi

## ripgrep: https://github.com/BurntSushi/ripgrep
#
if which rg >/dev/null; then
  alias rgn="rg --no-ignore"
fi

## ugrep: https://github.com/Genivia/ugrep
#
if which ug >/dev/null; then
  alias uq="ug -Q"          # short & quick query TUI (interactive, uses .ugrep config)
  alias ux="ug -UX"         # short & quick binary pattern search (uses .ugrep config)
  alias uz="ug -z"          # short & quick compressed files and archives search (uses .ugrep config)

  alias ugit="ug -R --ignore-files"  # works like git-grep & define your preferences in .ugrep config

  alias grep="ugrep -G"     # search with basic regular expressions (BRE)
  alias egrep="ugrep -E"    # search with extended regular expressions (ERE)
  alias fgrep="ugrep -F"    # find string(s)
  alias pgrep="ugrep -P"    # search with Perl regular expressions
  alias xgrep="ugrep -W"    # search (ERE) and output text or hex for binary

  alias zgrep="ugrep -zG"   # search compressed files and archives with BRE
  alias zegrep="ugrep -zE"  # search compressed files and archives with ERE
  alias zfgrep="ugrep -zF"  # find string(s) in compressed files and/or archives
  alias zpgrep="ugrep -zP"  # search compressed files and archives with Perl regular expressions
  alias zxgrep="ugrep -zW"  # search (ERE) compressed files/archives and output text or hex for binary
fi

## OpenJDK
if [ -e /opt/homebrew/opt/openjdk/bin ]; then
  export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
fi

## navi: https://github.com/denisidoro/navi
#
if which navi >/dev/null; then
  # Installing navi shell widget as Ctrl+G
  eval "$(navi widget zsh)"
fi

## ngrok: https://ngrok.com/
#
if which ngrok >/dev/null; then
  eval "$(ngrok completion)"
fi

## direnv: https://github.com/direnv/direnv
#
if which direnv >/dev/null; then
  eval "$(direnv hook zsh)"
fi

## Kitty
#
if which kitty >/dev/null; then
  kitty + complete setup zsh | source /dev/stdin
fi

## 1Password
#
if which op >/dev/null; then
  eval "$(op completion zsh)"; compdef _op op
fi

## Terraform
#
if which terraform >/dev/null; then
  autoload -U +X bashcompinit && bashcompinit
  TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"
fi

## Google Cloud SDK
#
# The next line updates PATH for the Google Cloud SDK.
if [ -e /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/ ]; then
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
fi
if [ -e /opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/ ]; then
  source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
  source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
fi
if [ -e $HOME/google-cloud-sdk/ ]; then
  source "$HOME/google-cloud-sdk/path.zsh.inc"
  source "$HOME/google-cloud-sdk/completion.zsh.inc"
fi

## AWS CLI
#
if which aws >/dev/null; then
  autoload bashcompinit && bashcompinit
  complete -C $(which aws_completer) aws
fi

## Horizontal Line
#
function hr() {
  printf "\e[7m$(printf %$(tput cols)s $(date +%Y/%m/%d-%T))\e[m\n"
}

## thefuck
#
if which thefuck >/dev/null; then
  eval $(thefuck --alias)
fi

## gettext
#
if [[ -x /usr/local/opt/gettext/bin ]]; then
  export PATH="/usr/local/opt/gettext/bin:$PATH"
fi

## Cargo for Rust
#
if [[ -d $HOME/.cargo/bin ]]; then
  source "$HOME/.cargo/env"
fi

## Go
#
if which go >/dev/null; then
  export GOPATH="$HOME/go"
  export PATH="$PATH:$GOPATH/bin"
fi

## GitHub Copilot CLI
#
if which github-copilot-cli >/dev/null; then
  eval "$(github-copilot-cli alias -- "$0")"
fi

## rbenv
#
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

## Git
#
compdef g=git
export GIT_EDITOR=nvim

## gh: GitHub CLI
#
if which gh >/dev/null; then
  eval "$(gh completion -s zsh)"
  gh alias set rl 'repo list' >/dev/null 2>&1
  gh alias set rv 'repo view --web' >/dev/null 2>&1
  gh alias set il 'issue list' >/dev/null 2>&1
  gh alias set is 'issue status' >/dev/null 2>&1
  gh alias set iv 'issue view --web' >/dev/null 2>&1
  gh alias set pl 'pr list' >/dev/null 2>&1
  gh alias set ps 'pr status' >/dev/null 2>&1
  gh alias set pv 'pr view --web' >/dev/null 2>&1
  gh alias set b 'browse' >/dev/null 2>&1
  gh alias set s 'status' >/dev/null 2>&1
fi

## ghq
#
if which ghq >/dev/null; then
  alias repos="ghq list | fzf --preview 'bat --color=always --style=header,grid --line-range :80 $(ghq root)/{}/README.*'"
  alias repo='cd $(ghq root)/$(repos)'
fi

## MObileSHell
#
compdef mosh=ssh

## SSH w/ Yubikey
#
if which gpgconf >/dev/null; then
  gpgconf --kill all
  export GPG_TTY="$(tty)"
  export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  gpgconf --launch gpg-agent
else
  echo "gpgconf not found"
fi


### OpenPGP
#
encrypt() {
  output=~/"${1}".$(date +%s).enc
  gpg --encrypt --armor --output ${output} -r 0x0000 -r 0x0001 -r 0x0002 "${1}" && echo "${1} -> ${output}"
}

decrypt() {
  output=$(echo "${1}" | rev | cut -c16- | rev)
  gpg --decrypt --output ${output} "${1}" && echo "${1} -> ${output}"
}

## deta: https://deta.sh/
#
if [ -e $HOME/.deta/bin ]; then
  export PATH="$HOME/.deta/bin:$PATH"
fi

## NeoVim
#
if which nvim >/dev/null; then
  alias vi="nvim"
  alias vim="nvim"
  export XDG_CONFIG_HOME="$HOME/.config"
else
  alias vi="vim"
fi

## Yarn
#
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

## Volta
#
if which volta >/dev/null; then
  export VOLTA_HOME="$HOME/.volta"
  export PATH="$VOLTA_HOME/bin:$PATH"
  volta completions --force --quiet zsh -o $PERSONAL_COMP_DIR/_volta

  if which node >/dev/null; then
    volta setup --quiet
  fi
fi

## Visual Studio Code
#
if which code >/dev/null; then
  export EDITOR="code"
fi

## fpp: Facebook PathPicker
#
if which fpp >/dev/null; then
  export FPP_EDITOR="code"
fi

## zoxide: Smarter cd command
#
if which zoxide >/dev/null; then
  eval "$(zoxide init zsh)"
fi

## OpenSSL
#
# For Intel
if [ -x /usr/local/opt/openssl/bin/openssl ]; then
  export PATH=/usr/local/opt/openssl/bin:$PATH
  export LDFLAGS="-L/usr/local/opt/openssl/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl/include"
fi
# For M1
if [ -x /opt/homebrew/opt/openssl/bin/openssl ]; then
  export PATH=/opt/homebrew/opt/openssl/bin:$PATH
  export LDFLAGS="-L/opt/homebrew/opt/openssl/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/openssl/include"
fi

## translate-shell
#
if which trans >/dev/null; then
  alias -g T="| trans :ja"
fi

## iTerm2 Shell Integrations
#
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# End Profiling
#if type zprof > /dev/null 2>&1; then
#  zprof | less
#fi
