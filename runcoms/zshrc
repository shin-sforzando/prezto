#
# Executes commands at the start of an interactive session.
#

# Start Profiling
#zmodload zsh/zprof

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

## cdr
autoload -Uz is-at-least
if is-at-least 4.3.11
then
  autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
  add-zsh-hook chpwd chpwd_recent_dirs
  add-zsh-hook zshexit compact-chpwd-recent-dirs
  zstyle ':chpwd:*' recent-dirs-max 5000
  zstyle ':chpwd:*' recent-dirs-default yes
  zstyle ':completion:*' recent-dirs-insert both
fi

function compact-chpwd-recent-dirs() {
  emulate -L zsh
  setopt extendedglob
  local -aU reply
  integer history_size
  autoload -Uz chpwd_recent_filehandler
  chpwd_recent_filehandler
  histroy_size=$#reply
  reply=(${^reply}(N))
	(( $history_size == $#reply )) || chpwd_recent_filehandler $reply
}

## cURL
#
if [[ -x /usr/local/opt/curl/bin ]]; then
  export PATH="/usr/local/opt/curl/bin:$PATH"
fi

## Delete Disused Files
alias ddf="find . \( -name '.DS_Store' -o -name '._*' -o -name '.apdisk' -o -name 'Thumbs.db' -o -name 'Desktop.ini' \) -delete -print"

## exa: Modern replacement for 'ls'
#
if which exa > /dev/null; then
  alias ls='exa -hF'
  alias l='exa -haF'
  alias la='exa -haF'
  alias ll='exa -halF --git'

  function chpwd() {
    exa -halF --git
  }
else
  function chpwd() {
    ls -GlA
  }
fi

## bat: https://github.com/sharkdp/bat
#
if which bat > /dev/null; then
  alias cat='bat'
fi

## ripgrep: https://github.com/BurntSushi/ripgrep
#
if which rg > /dev/null; then
  alias rgn='rg --no-ignore'
fi

## navi: https://github.com/denisidoro/navi
#
if which navi > /dev/null; then
  # Installing navi shell widget as Ctrl+G
  eval "$(navi widget zsh)"
fi

## Google Cloud SDK
#
if [ -e /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/ ]; then
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
  source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"

  if which peco > /dev/null; then
    function gconf() {
      projData=$(gcloud config configurations list | peco)
      if echo "${projData}" | grep -E "^[a-zA-Z].*" > /dev/null ; then
        config=$(echo ${projData} | awk '{print $1}')
        gcloud config configurations activate ${config}
        echo "=== The current account is as follows ==="
        gcloud config configurations list | grep "${config}"
      fi
    }
  fi
fi

## Highlight
#
alias hl='highlight --force --line-numbers --zeroes --style=molokai --out-format=truecolor'

## Homebrew
#
alias bug='cd && brew update && hr && brew upgrade && hr && brew upgrade --cask && hr && brew cleanup -s && hr && ddf && hr && cd -'

## Horizontal Line
#
function hr() {
  printf "\e[7m$(printf %$(tput cols)s $(date +%Y/%m/%d-%T))\e[m\n"
}

## thefuck
#
if which thefuck > /dev/null; then
  eval $(thefuck --alias)
fi

## gettext
#
if [[ -x /usr/local/opt/gettext/bin ]]; then
  export PATH="/usr/local/opt/gettext/bin:$PATH"
fi

## Cargo
#
if [[ -d $HOME/.cargo/bin ]]; then
    PATH="$HOME/.cargo/bin:$PATH"
fi

## Git
#
compdef g=git
export GIT_EDITOR=nvim

## ghq
#
if which ghq > /dev/null; then
  alias repos='ghq list -p | peco'
  alias repo='cd $(repos)'

  if which peco > /dev/null; then
    function peco-src () {
      local selected_dir=$(ghq list -p | peco --query "$LBUFFER")
      if [ -n "$selected_dir" ]; then
        BUFFER='cd ${selected_dir}'
        zle accept-line
      fi
      zle clear-screen
    }
    zle -N peco-src

    bindkey '^]' peco-src
  fi

  ## ghq-foreach
  function ghq-foreach() {
    if [[ $# -eq 0 ]]; then
      echo "Usage: ghq-foreach (<git command>|-e <shell command>) [args]" >&2
      return 1
    fi
    EXEC=
    if [[ $1 = "-e" ]]; then
      EXEC=1
      shift
    fi
    ghq list -p | while read -r repo; do
      (
        chpwd(){}  # Temporarily disable chpwd()
        cd $repo
        echo -e "\033[0;36m \u00bb $repo \033[0;39m"
        if [[ $EXEC ]]; then
          $@
        else
          git $@
        fi
      )
    done
  }
fi

## MObileSHell
#
compdef mosh=ssh

## broot: https://github.com/Canop/broot
#
if which broot > /dev/null; then
  source /Users/suzuki/.config/broot/launcher/bash/br
fi

## NeoVim
#
if which nvim > /dev/null; then
  alias vi="nvim"
  alias vim="nvim"
  export XDG_CONFIG_HOME="$HOME/.config"
else
  alias vi="vim"
fi

## nodebrew
#
if which nodebrew > /dev/null; then
  export PATH=$HOME/.nodebrew/current/bin:$PATH
fi

## Visual Studio Code
#
if which code > /dev/null; then
  export EDITOR="code"
fi

## Yarn
#
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

## OpenSSL
#
if [ -x /usr/local/opt/openssl/bin/openssl ]; then
  export PATH=/usr/local/opt/openssl/bin:$PATH
  export LDFLAGS="-L/usr/local/opt/openssl/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl/include"
fi

## Peco
#
if which peco > /dev/null; then
  alias top='top | peco'
  alias ps='ps aux | peco'
  alias -g P='| peco'

  function peco-select-history () {
    BUFFER=$(history -nr 1 | awk '!a[$0]++' | peco --query "$LBUFFER" | sed 's/\\n/\n/')
    CURSOR=$#BUFFER # move cursor
    zle -R -c       # refresh
  }
  zle -N peco-select-history

  function peco-cdr () {
    local selected_dir="$(cdr -l | sed -e 's/^[[:digit:]]*[[:blank:]]*//' | peco --query "$LBUFFER")"
    if [ -n "$selected_dir" ]; then
      BUFFER="cd ${selected_dir}"
      zle accept-line
    fi
  }
  zle -N peco-cdr

  function peco-source () {
    if which ag > /dev/null; then
      GREP_CMD=ag
    fi
    if which rg > /dev/null; then
      GREP_CMD=rg
    fi
    $GREP_CMD "$@" . | peco --exec 'awk -F : '"'"'{print "+" $2 " " $1}'"'"' | xargs less -N '
  }
  zle -N peco-source

  function peco-file-vim () {
    local filepath=$(ag -l | peco --prompt 'PATH>')
    if [ -n "$filepath" ]; then
      if [ -n "$BUFFER" ]; then
        BUFFER="$BUFFER $(echo $filepath | tr '\n' ' ')"
        CURSOR=$#BUFFER
      else
        if [ -f "$filepath" ]; then
          BUFFER="vim $filepath"
          zle accept-line
        fi
      fi
    fi
  }
  zle -N peco-file-vim

  bindkey '^r' peco-select-history
  bindkey '^j' peco-cdr
  bindkey '^v' peco-file-vim
fi

## zoxide: https://github.com/ajeetdsouza/zoxide
#
if which zoxide > /dev/null; then
  eval "$(zoxide init zsh)"
fi

## McFly: https://github.com/cantino/mcfly
#
if [[ -r "/usr/local/opt/mcfly/mcfly.zsh" ]]; then
  export MCFLY_FUZZY=true
  # Ctrl+R calls mcfly widget
  source "/usr/local/opt/mcfly/mcfly.zsh"
fi

## Pygments
#
if which pygmentize > /dev/null; then
  alias pcat='pygmentize -f terminal -O bg=dark,linenos=True'
fi

## transfer.sh
# Defines transfer alias and provides easy command line file and folder sharing.
# Authors:
#   Remco Verhoef <remco@dutchcoders.io>
transfer() {
    # check arguments
    if [ $# -eq 0 ]; then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi
    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )
    # upload stdin or file
    file=$1
    if tty -s; then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
        if [ ! -e $file ]; then
            echo "File $file doesn't exists."
            return 1
        fi
        if [ -d $file ]; then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi
    # cat output link
    cat $tmpfile | pbcopy
    # cleanup
    rm -f $tmpfile
}

## translate-shell
#
if which trans > /dev/null; then
  alias -g T='| trans :ja'
fi

## iTerm2 Shell Integrations
#
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# End Profiling
#if type zprof > /dev/null 2>&1; then
#  zprof | less
#fi
